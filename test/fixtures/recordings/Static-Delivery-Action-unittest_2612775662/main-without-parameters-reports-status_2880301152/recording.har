{
  "log": {
    "_recordingName": "Static Delivery Action #unittest/main() without parameters reports status",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "2.4.0"
    },
    "entries": [
      {
        "_id": "d1b06285950ec0bbf84ef05dd596c70c",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "host",
              "value": "raw.githubusercontent.com"
            }
          ],
          "headersSize": 122,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [],
          "url": "https://raw.githubusercontent.com/adobe/helix-static/master/src/index.js"
        },
        "response": {
          "bodySize": 11340,
          "content": {
            "mimeType": "text/plain; charset=utf-8",
            "size": 11340,
            "text": "/*\n * Copyright 2018 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nconst request = require('request-promise-native');\nconst crypto = require('crypto');\nconst mime = require('mime-types');\nconst postcss = require('postcss');\nconst postcssurl = require('postcss-url');\nconst parser = require('postcss-value-parser');\nconst babel = require('@babel/core');\nconst ohash = require('object-hash');\nconst sanitizer = require('sanitizer');\n\nconst { space } = postcss.list;\nconst uri = require('uri-js');\n/* eslint-disable no-console */\n\n// one megabyte openwhisk limit + 20% Base64 inflation + safety padding\nconst REDIRECT_LIMIT = 750000;\n\nfunction errorCode(code) {\n  switch (code) {\n    case 400:\n      return 404;\n    default:\n      return code;\n  }\n}\n\nfunction error(message, code = 500) {\n  // treat\n  const statusCode = errorCode(code);\n  console.error('delivering error', message, code);\n  return {\n    statusCode,\n    headers: {\n      'Content-Type': 'text/html',\n      'X-Static': 'Raw/Static',\n      'Cache-Control': 'max-age=300',\n    },\n    body: sanitizer.escape(message),\n  };\n}\n\n\nfunction isCSS(type) {\n  return type === 'text/css';\n}\n\nfunction isJavaScript(type) {\n  return type.match(/(text|application)\\/(x-)?(javascript|ecmascript)/);\n}\n\nfunction addHeaders(headers, ref, content) {\n  let cacheheaders = {};\n  if (ref.match(/[a-f0-9]{40}/)) {\n    cacheheaders = {\n      'Cache-Control': 'max-age=131400',\n    };\n  } else if (content) {\n    const hash = crypto.createHash('md5').update(content);\n    cacheheaders = {\n      ETag: `\"${hash.digest('base64')}\"`,\n      'Cache-Control': 's-maxage=300',\n    };\n    if (headers['Content-Type'] && (\n      isCSS(headers['Content-Type'])\n      || isJavaScript(headers['Content-Type'])\n    ) && content.toString().match(/<esi:include/)) {\n      cacheheaders['X-ESI'] = true;\n    }\n  }\n  return Object.assign(headers, cacheheaders);\n}\n\n\nfunction isBinary(type) {\n  if (type.match(/text\\/.*/)) {\n    return false;\n  }\n  if (type.match(/.*\\/javascript/)) {\n    return false;\n  }\n  if (type.match(/.*\\/.*json/)) {\n    return false;\n  }\n  if (type.match(/.*\\/.*xml/)) {\n    return !!type.match(/svg/); // openwshisk treats svg as binary\n  }\n  return true;\n}\n\nfunction rewriteCSS(css, base = '') {\n  function rewriteImports(tree) {\n    tree.walkAtRules('import', (rule) => {\n      if (rule.name === 'import') {\n        const [url, queries] = space(rule.params);\n        const parsedurl = parser(url);\n        if (parsedurl.nodes\n          && parsedurl.nodes.length === 1\n          && parsedurl.nodes[0].value === 'url'\n          && parsedurl.nodes[0].nodes\n          && parsedurl.nodes[0].nodes.length === 1\n          && parsedurl.nodes[0].nodes[0].type === 'string'\n          && typeof parsedurl.nodes[0].nodes[0].value === 'string'\n          && typeof parsedurl.nodes[0].nodes[0].quote === 'string') {\n          const importuri = uri.parse(parsedurl.nodes[0].nodes[0].value);\n          const { quote } = parsedurl.nodes[0].nodes[0];\n          if (importuri.reference === 'relative' && !importuri.query) {\n            rule.replaceWith(postcss.atRule({\n              name: 'import',\n              params: `url(${quote}<esi:include src=\"${importuri.path}.url\"/><esi:remove>${importuri.path}</esi:remove>${quote}) ${queries}`,\n            }));\n          }\n        } else if (parsedurl.nodes\n          && parsedurl.nodes[0].type === 'string'\n          && typeof parsedurl.nodes[0].value === 'string'\n          && typeof parsedurl.nodes[0].quote === 'string') {\n          const importuri = uri.parse(parsedurl.nodes[0].value);\n          const { quote } = parsedurl.nodes[0];\n          if (importuri.reference === 'relative' && !importuri.query) {\n            rule.replaceWith(postcss.atRule({\n              name: 'import',\n              params: `${quote}<esi:include src=\"${uri.resolve(base, importuri.path)}.url\"/><esi:remove>${importuri.path}</esi:remove>${quote} ${queries}`,\n            }));\n          }\n        }\n      }\n    });\n    return tree;\n  }\n\n\n  const processor = postcss()\n    .use(rewriteImports)\n    .use(postcssurl({\n      url: (asset) => {\n        // TODO pass in request URL and make it absolute.\n        if (asset.search === '' && asset.absolutePath !== '.' && asset.relativePath !== '.') {\n          return `<esi:include src=\"${uri.resolve(base, asset.relativePath)}.url\"/><esi:remove>${asset.relativePath}</esi:remove>`;\n        }\n        return asset.url;\n      },\n    }));\n  return processor.process(css, { from: undefined }).then(result => result.css);\n}\n\nfunction rewriteJavaScript(javascript, base = '') {\n  const importmap = {};\n\n  function rewriteJSImports(bab) {\n    const t = bab.types;\n    return {\n      visitor: {\n        ImportDeclaration(path) {\n          if (path\n            && path.node\n            && path.node.source\n            && path.node.source.value\n            && !importmap[path.node.source.value]) {\n            const srcuri = uri.parse(path.node.source.value);\n            if (srcuri.reference === 'relative' && !srcuri.query) {\n              const { specifiers } = path.node;\n              // console.log(srcuri);\n              const h = ohash(srcuri.path);\n              importmap[h] = `<esi:include src=\"${uri.resolve(base, srcuri.path)}.url\"/><esi:remove>${path.node.source.value}</esi:remove>`;\n              path.replaceWith(t.importDeclaration(specifiers, t.stringLiteral(h)));\n            }\n          }\n          return false;\n        },\n      },\n    };\n  }\n\n  try {\n    const transformed = babel.transformSync(javascript,\n      { plugins: [rewriteJSImports], retainLines: true });\n\n    return Object.keys(importmap)\n      .reduce((src, key) => src.replace(key, importmap[key]), transformed.code);\n  } catch (e) {\n    return javascript;\n  }\n}\n\nfunction isJSON(type) {\n  return !!type.match(/json/);\n}\n\nfunction getBody(type, responsebody, esi = false, entry) {\n  if (isBinary(type)) {\n    return Buffer.from(responsebody).toString('base64');\n  }\n  if (isJSON(type)) {\n    return JSON.parse(responsebody);\n  }\n  if (esi && isCSS(type)) {\n    return rewriteCSS(responsebody.toString(), entry);\n  }\n  if (esi && isJavaScript(type)) {\n    return rewriteJavaScript(responsebody.toString(), entry);\n  }\n  return responsebody.toString();\n}\n\nfunction forbidden() {\n  return {\n    statusCode: 403,\n    headers: {\n      'Content-Type': 'text/plain',\n      'Cache-Control': 'max-age=300', // don't bother us for the next five minutes\n    },\n    body: 'forbidden.',\n  };\n}\n\nfunction staticBase(owner, repo, entry, ref, strain = 'default') {\n  return `__HLX/${owner}/${repo}/${strain}/${ref}/${entry}/DIST__`;\n}\n\nfunction deliverPlain(owner, repo, ref, entry, root, esi = false) {\n  const cleanentry = (`${root}/${entry}`).replace(/^\\//, '').replace(/[/]+/g, '/');\n  console.log('deliverPlain()', owner, repo, ref, cleanentry);\n  const url = `https://raw.githubusercontent.com/${owner}/${repo}/${ref}/${cleanentry}`;\n  console.log(url);\n  const rawopts = {\n    url,\n    headers: {\n      'User-Agent': 'Project Helix Static',\n    },\n    resolveWithFullResponse: true,\n    encoding: null,\n  };\n\n  return request.get(rawopts).then(async (response) => {\n    const type = mime.lookup(cleanentry) || 'application/octet-stream';\n    const size = parseInt(response.headers['content-length'], 10);\n    console.log('size', size);\n    if (size < REDIRECT_LIMIT) {\n      const body = await getBody(type, response.body, esi, entry);\n      console.log(`delivering file ${cleanentry} type ${type} binary: ${isBinary(type)}`);\n      return {\n        statusCode: 200,\n        headers: addHeaders({\n          'Content-Type': type,\n          'X-Static': 'Raw/Static',\n          'X-ESI': esi ? 'enabled' : undefined,\n        }, ref, response.body),\n        body,\n      };\n    }\n    console.log('Redirecting to GitHub');\n    return {\n      statusCode: 307,\n      headers: {\n        Location: url,\n        'X-Content-Type': type,\n        'X-Static': 'Raw/Static',\n      },\n    };\n  }).catch((rqerror) => {\n    if (esi) {\n      // the ESI failed, so we simply fall back to the original URL\n      // the browser will fetch it again, so let's cache the 404\n      // for five minutes, in order to prevent the static function\n      // from being called too often\n      return {\n        statusCode: 404,\n        headers: {\n          'Content-Type': 'text/plain',\n          'Cache-Control': 's-maxage=300',\n        },\n        body: entry,\n      };\n    }\n    if (rqerror.statusCode === 404 || rqerror.statusCode === '404') {\n      return error(entry, rqerror.statusCode);\n    }\n    return error(rqerror.response.body.toString(), rqerror.statusCode);\n  });\n}\n\n/**\n * The denylist of paths that may never be served\n * @param {*} path\n */\nfunction rejected(path, allow, deny) {\n  const allowlist = allow ? new RegExp(allow) : false;\n  const denylist = deny ? new RegExp(deny) : false;\n\n  if (allowlist) {\n    return !(allowlist.test(path)) || rejected(path, undefined, deny);\n  }\n  if (denylist) {\n    return denylist.test(path) || rejected(path);\n  }\n  if (/^(.*\\/?)package\\.json$/.test(path)) {\n    return true;\n  }\n  if (/^(.*\\/?)helix-config\\.yaml$/.test(path)) {\n    return true;\n  }\n  if (/(^|\\/)\\..+/.test(path)) {\n    return true;\n  }\n  if (/^\\/?src\\//.test(path)) {\n    return true;\n  }\n  return false;\n}\n/**\n *\n * @param {Object} params The OpenWhisk parameters\n * @param {string} params.owner Repository owner on GitHub\n * @param {string} params.repo Repository name on GitHub\n * @param {string} params.ref SHA of a commit or name of a branch or tag on GitHub\n * @param {string} params.path path to the requested file (if used with `entry`)\n * @param {string} params.entry path to the file requested by the browser\n * @param {boolean} params.plain disable asset pre-processing with Parcel\n * @param {string} params.allow regular expression pattern that all delivered files must follow\n * @param {string} params.deny regular expression pattern that all delivered files may not follow\n * @param {string} params.root document root for all static files in the repository\n * @param {boolean} params.esi replace relative URL references in JS and CSS with ESI references\n */\nasync function main({\n  owner,\n  repo,\n  ref = 'master',\n  path,\n  entry,\n  strain = 'default',\n  plain = false,\n  allow,\n  deny,\n  root = '',\n  esi = false,\n}) {\n  console.log('main()', owner, repo, ref, path, entry, strain, plain, allow, deny, root);\n\n  const file = uri.normalize(entry);\n  console.log(file);\n  if (rejected(file, allow, deny)) {\n    return forbidden();\n  }\n\n  if (plain) {\n    return deliverPlain(owner, repo, ref, file, root, esi);\n  }\n\n  return forbidden();\n}\n\nmodule.exports = {\n  main, error, addHeaders, isBinary, staticBase, rejected, getBody,\n};\n"
          },
          "cookies": [],
          "headers": [
            {
              "name": "content-security-policy",
              "value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-frame-options",
              "value": "deny"
            },
            {
              "name": "x-xss-protection",
              "value": "1; mode=block"
            },
            {
              "name": "etag",
              "value": "\"d653c39747fb81f3545b6daa6ada698a7d6c495c\""
            },
            {
              "name": "content-type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "name": "cache-control",
              "value": "max-age=300"
            },
            {
              "name": "x-geo-block-list",
              "value": ""
            },
            {
              "name": "x-github-request-id",
              "value": "A7A8:4D62:1A6DCA:1EAEBA:5CDD19E2"
            },
            {
              "name": "content-length",
              "value": "11340"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "date",
              "value": "Thu, 16 May 2019 08:05:55 GMT"
            },
            {
              "name": "via",
              "value": "1.1 varnish"
            },
            {
              "name": "connection",
              "value": "close"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra19162-FRA"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "x-timer",
              "value": "S1557993956.738171,VS0,VE183"
            },
            {
              "name": "vary",
              "value": "Authorization,Accept-Encoding"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "x-fastly-request-id",
              "value": "3ca891b9ac4c95408a038ee7c84a70d58c7088fb"
            },
            {
              "name": "expires",
              "value": "Thu, 16 May 2019 08:10:55 GMT"
            },
            {
              "name": "source-age",
              "value": "0"
            }
          ],
          "headersSize": 821,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2019-05-16T08:05:55.626Z",
        "time": 329,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 329
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
